// # The Power Of Five
//   by Lucilla
//
//   `@writing.ts`
//   Functionality for the `writing.html` page.

/**
 * Hi, welcome to the source code! I tried my best to make it as understandable
 * as I could to as many folks as possible, regardless of prior knowledge. Do
 * feel more than welcome to skip ahead if I'm boring you with explanations.
 *
 * This is TypeScript code. Wait, don't websites run JavaScript? TypeScript is
 * the same as JavaScript, except that it has syntax for variable types, so a
 * typechecker can automatically verify if a program uses types correctly,
 * instead of throwing errors when it runs or even silently misbehaving.
 * JavaScript is particularly bad with "making the best out of" wrong types:
 * in an expression like `2 + true`, which shouldn't make sense, `true` gets
 * automatically converted to `1` and the expression evaluates to `3`. this
 * might sound good on paper, but in practice it harms more than it helps, by
 * making it harder to spot bugs later down the line, because its quirky
 * behaviors are rarely what programmers intend. TypeScript prevents this sort
 * of thing before the program even runs, by extending JavaScript with type
 * annotations for variables, function parameters, objects, etc. (Admittedly,
 * I used TypeScript because I'm notoriously bad at not making mistakes in
 * languages that don't have automatic type checking.)
 *
 * But wait, if TypeScript is an extension of JavaScript, then how can browsers
 * run it? Well, they can't. The same tool that typechecks TypeScript code can
 * also *transpile* it to JavaScript -- though you can also turn TypeScript
 * into JavaScript by hand by simply removing all the type-related stuff. I
 * used the transpiler to generate the JavaScript, since it also performs a few
 * additional transformations, such as rewriting some newer operators in terms
 * of older ones for compatibility. And, yeah, that technically means I didn't
 * write the code your browser runs on my own, but just by comparing the
 * TypeScript and JavaScript side by side, it's clear that they're the same
 * code. The TypeScript transpiler is particularly faithful to the shape of the
 * original source code.
 *
 * Okay, that was the overly lengthy introduction! If you want more info about
 * TypeScript, see [the TypeScript website](https://www.typescriptlang.org).
 *
 * This comment block is repeated exactly the same in each .ts source file.
 * Feel more than free to skip it.
 */



// ## Imports

import {
	dataPath,
	executeOnLoad,
	fetchJsonAndThen,
	getSearchParamBool,
	just,
} from "./utils.ts"

import {
	ProjectJson,
	createCopyButton,
	createWritingGallery,
} from "./utils-portfolio.ts";



// ## Global variables

/**
 * First, we have two variables for HTML elements that we get from the document
 * by their IDs.
 * 
 * Next, `allowCopyingHtml` and `showHidden` work just like in `@projects.ts`:
 * they're booleans that control, respectively, whether a button for copying
 * HTML to the clipboard should be visible, and whether hidden projects should
 * be displayed.
 * 
 * Finally, `projectJson` is the array of project data from `projects.json`.
 */

let writingGallery: HTMLElement; // `<section>` for writing gallery
let writingIntro:   HTMLElement; // `<p>` describing the writing gallery

let allowCopyingHtml = false;
let showHidden       = false;

let projectJson: ProjectJson;



// ## Functions

/**
 * `copyWritingHtml`
 * From `writingGallery`, creates a string of HTML for the pregenerated
 * projects page for folks that view it without JavaScript, and copies it to
 * the clipboard. From there, I paste it into the code of `writing.html`
 * manually.
 */
function copyWritingHtml(writingGallery: HTMLElement) {
	// Create the string.
	const text = (
		// A little comment to mark my presence. <5
		// Then, the writing gallery outer HTML.
		`
		<!-- 
		this is a static version of the writing gallery, 
		for folks who have javascript disabled. 
		automagically generated by The Power Of Five! <5 
		--> 
		${writingGallery.outerHTML}
		`
		// Remove all tabs and newlines.
		.replace(/[\t\r\n]+/g, "")
		// Make the ID unique, by adding an "-s" suffix.
		.replace('id="writing-gallery"', 'id="writing-gallery-s"')
	);
	// Copy that string to the clipboard.
	navigator.clipboard.writeText(text);
}


/**
 * `initialize`
 * Do this once the project JSON has been retrieved.
 */
function initialize() {
	// If `allowCopyingHtml` is `true`, make a copy button.
	if (allowCopyingHtml) {
		createCopyButton(
			writingIntro,
			() => { copyWritingHtml(writingGallery); }
		);
	}
	// Then make the writing gallery.
	createWritingGallery(
		writingGallery,
		{ projectJson, showHidden }
	);
	// The arguments to pass look a little weird, but the definitions of the
	// functions in `utils-portfolio.ts` make them clear.
}


/**
 * `main`
 * Do this once the page fully loads.
 */
function main() {
	// Get the fixed HTML elements on the page by their IDs and bind them to
	// global variables. Feed them through `just(...)` so that TypeScript knows
	// they exist (rather than being `null`) -- if for some reason they don't,
	// the function will error already here.
	writingGallery = just(document.getElementById("writing-gallery"));
	writingIntro   = just(document.getElementById("writing-intro"));
	// If the search params contain "copy", set `allowCopyingHtml` to `true`,
	// which will later create the button that copies the gallery HTML to the
	// clipboard. If they contain "hidden", set `showHidden` to `true`, which
	// will display hidden projects.
	allowCopyingHtml = getSearchParamBool("copy");
	showHidden       = getSearchParamBool("hidden");
	// Fetch `projects.json`, put it in the `projectJson` global variable,
	// and then run `initialize`.
	fetchJsonAndThen(
		`${dataPath}projects.json`,
		json => {
			projectJson = json;
			initialize();
		}
	)
}



/**
 * Once the page loads, run `main`.
 */

executeOnLoad(main);
