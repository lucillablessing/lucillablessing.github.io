import { dataPath, executeOnLoad, fetchJsonAndThen, getSearchParamBool, just, toggleElement, } from "./utils.js";
import { isProjectTagPrimaryX, isProjectTagSecondary, createControls, createProjectGallery, createWishlist, } from "./utils-portfolio.js";
let projectsIntroDesc;
let projectWishlist;
let projectGallery;
let projectSelection;
let primaryControls;
let secondaryControls;
let wishlistNumMatched;
let galleryNumMatched;
let activePrimaryFilter = "music";
let activeSecondaryFilters = new Set(["major"]);
let allowCopyingHtml = false;
let showHidden = false;
let projectJson;
function copyProjectsHtml(gallery, wishlist) {
    const text = (`
		<!-- 
		this is a static version of the project gallery, 
		for folks who have javascript disabled. 
		automagically generated by The Power Of Five! <5 
		--> 
		${wishlist.outerHTML}
		${gallery.outerHTML}
		`
        .replace(/[\t\r\n]+/g, "")
        .replace(/\u00A0/g, "&nbsp;")
        .replace(/\u00AD/g, "&shy;")
        .replace(/style=""/g, "")
        .replace(/rgb\(\d+, \d+, \d+\)/g, "rgb(0, 0, 0)")
        .replace('id="project-wishlist"', 'id="project-wishlist-s"')
        .replace('id="project-gallery"', 'id="project-gallery-s"')
        .replace('id="wishlist-num-matched"', 'id="wishlist-num-matched-s"')
        .replace('id="gallery-num-matched"', 'id="gallery-num-matched-s"'));
    navigator.clipboard.writeText(text);
}
function updateControls() {
    for (const control of primaryControls.children) {
        if (control instanceof HTMLInputElement && control.checked) {
            const filter = control.getAttribute("data-luci-filter");
            if (filter && isProjectTagPrimaryX(filter)) {
                activePrimaryFilter = filter;
            }
        }
    }
    for (const control of secondaryControls.children) {
        if (control instanceof HTMLInputElement) {
            const filter = control.getAttribute("data-luci-filter");
            if (filter && isProjectTagSecondary(filter)) {
                if (control.checked) {
                    activeSecondaryFilters.add(filter);
                }
                else {
                    activeSecondaryFilters.delete(filter);
                }
            }
        }
    }
}
function updateGalleryCount(count) {
    galleryNumMatched.textContent = (count === 0 ?
        "no matches for these filters" :
        count === 1 ?
            "1 match" :
            `${count} matches`);
    galleryNumMatched.setAttribute("data-luci-count", count.toString());
}
function updateGalleryEntry(project) {
    let visible = true;
    if (activePrimaryFilter !== "all" &&
        !project.classList.contains(activePrimaryFilter)) {
        visible = false;
    }
    else {
        visible = false;
        for (const filter of activeSecondaryFilters) {
            if (project.classList.contains(filter)) {
                visible = true;
                break;
            }
        }
    }
    toggleElement(project, visible);
    return visible ? 1 : 0;
}
function updateGallery() {
    let count = 0;
    for (const project of projectGallery.children) {
        if (project instanceof HTMLElement &&
            project.classList.contains("project")) {
            const addCount = updateGalleryEntry(project);
            count += addCount;
        }
    }
    updateGalleryCount(count);
}
function updateWishlistCount(count) {
    wishlistNumMatched.textContent = (count === 0 ?
        "no matches for this category" :
        count === 1 ?
            "1 match" :
            `${count} matches`);
    wishlistNumMatched.setAttribute("data-luci-count", count.toString());
}
function updateWishlistEntry(element) {
    let visible = false;
    let count = 0;
    if (element.classList.contains("wishlist-heading")) {
        visible = activePrimaryFilter === "all";
    }
    else if (element.classList.contains("wishlist-list")) {
        visible = (activePrimaryFilter === "all" ||
            activePrimaryFilter === element.getAttribute("data-luci-filter"));
        count = visible ? element.childElementCount : 0;
    }
    else {
        return 0;
    }
    toggleElement(element, visible);
    return count;
}
function updateWishlist() {
    let count = 0;
    const details = projectWishlist.querySelector("details");
    if (details) {
        for (const project of details.children) {
            if (project instanceof HTMLElement) {
                const addCount = updateWishlistEntry(project);
                count += addCount;
            }
        }
    }
    updateWishlistCount(count);
}
function updateAll() {
    updateControls();
    updateWishlist();
    updateGallery();
}
function initialize() {
    createControls({ projectSelection, primaryControls, secondaryControls }, {
        activePrimaryFilter,
        activeSecondaryFilters,
        allowCopyingHtml,
        onChange: updateAll,
        onCopy: () => {
            copyProjectsHtml(projectGallery, projectWishlist);
        }
    });
    createWishlist({ wishlist: projectWishlist, numMatched: wishlistNumMatched }, { projectJson, showHidden });
    createProjectGallery({ gallery: projectGallery, numMatched: galleryNumMatched }, { projectJson, showHidden });
    updateAll();
}
function main() {
    projectsIntroDesc = just(document.getElementById("projects-intro-desc"));
    projectWishlist = just(document.getElementById("project-wishlist"));
    projectGallery = just(document.getElementById("project-gallery"));
    projectSelection = just(document.getElementById("project-selection"));
    toggleElement(projectsIntroDesc, true);
    toggleElement(projectWishlist, true);
    toggleElement(projectGallery, true);
    toggleElement(projectSelection, true);
    allowCopyingHtml = getSearchParamBool("copy");
    showHidden = getSearchParamBool("hidden");
    primaryControls = document.createElement("fieldset");
    secondaryControls = document.createElement("fieldset");
    wishlistNumMatched = document.createElement("p");
    galleryNumMatched = document.createElement("p");
    fetchJsonAndThen(`${dataPath}projects.json`, json => {
        projectJson = json;
        initialize();
    });
}
executeOnLoad(main);
